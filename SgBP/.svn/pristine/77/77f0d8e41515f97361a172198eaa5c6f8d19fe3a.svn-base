package com.gzepro.internal.query.soa.action.rcsm.base;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.gzepro.internal.query.common.util.DateUtil;
import com.gzepro.internal.query.model.RsSocialworker;
import com.gzepro.internal.query.model.RsTalantteam;
import com.gzepro.internal.query.soa.base.SoaBaseJsonAction;
import com.gzepro.internal.query.soa.service.user.impl.RsTalantTeamService;

@SuppressWarnings("serial")
@Scope("prototype")
@Component("rsTalantTeam")
public class RsTalantTeamAction   extends SoaBaseJsonAction{

	public static DecimalFormat df = new DecimalFormat("0.00");//格式化小数，不足的补0
	public static SimpleDateFormat sdfDay=new SimpleDateFormat("yyyyMMdd");
	public static SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
	public static String FNAME="人才工作考核及人才队伍建设情况.xls";
	@Resource
	private RsTalantTeamService rsTalantTeamService;
	
	private List<RsSocialworker> socialworkerList=new ArrayList<RsSocialworker>();
	
	private String queryYear;//查询条件年份，默认为当前年
	
	private Map<String, String> resultMap=new HashMap<String, String>();//统计的结果返回到页面
	
	@Override
	public String execute() throws Exception {
		return SUCCESS;
	}
	
	/**
	 * 获取数据
	 * @return
	 */
	public float[] getDataMap(String pcounty,String year){
		float[] arr_pcountu = new float[4];
		queryYear = year;
		try {
			this.view();
			//每万人口中人才资源量比例增长率	
			float _max = Float.parseFloat(resultMap.get("2-0").substring(0, resultMap.get("2-0").indexOf("%")));
			for(int i = 1;i<10;i++){
				float _mid = Float.parseFloat(resultMap.get("2-"+i).substring(0, resultMap.get("2-"+i).indexOf("%")));			
				if(_mid > _max){
					_max = _mid;
				}
			}
			int _temp = Integer.parseInt(pcounty)-1;
			float _pcounty = Float.parseFloat(resultMap.get("2-"+_temp).substring(0, resultMap.get("2-"+_temp).indexOf("%")));
			arr_pcountu[0] = _pcounty/_max;
			//企业经营管理人才占从业人员的比例
			_max = Float.parseFloat(resultMap.get("4-0").substring(0, resultMap.get("4-0").indexOf("%")));
			for(int i = 1;i<10;i++){
				float _mid = Float.parseFloat(resultMap.get("4-"+i).substring(0, resultMap.get("4-"+i).indexOf("%")));			
				if(_mid > _max){
					_max = _mid;
				}
			}
			_temp = Integer.parseInt(pcounty)-1;
			_pcounty = Float.parseFloat(resultMap.get("4-"+_temp).substring(0, resultMap.get("4-"+_temp).indexOf("%")));
			arr_pcountu[1] = _pcounty/_max;
			//专业技术人才占从业人员的比例		
			_max = Float.parseFloat(resultMap.get("6-0").substring(0, resultMap.get("6-0").indexOf("%")));
			for(int i = 1;i<10;i++){
				float _mid = Float.parseFloat(resultMap.get("6-"+i).substring(0, resultMap.get("6-"+i).indexOf("%")));			
				if(_mid > _max){
					_max = _mid;
				}
			}
			_temp = Integer.parseInt(pcounty)-1;
			_pcounty = Float.parseFloat(resultMap.get("6-"+_temp).substring(0, resultMap.get("6-"+_temp).indexOf("%")));
			arr_pcountu[2] = _pcounty/_max;
			//农村实用人才占农村农运力的比例	
			_max = Float.parseFloat(resultMap.get("7-0").substring(0, resultMap.get("7-0").indexOf("%")));
			for(int i = 1;i<10;i++){
				float _mid = Float.parseFloat(resultMap.get("7-"+i).substring(0, resultMap.get("7-"+i).indexOf("%")));			
				if(_mid > _max){
					_max = _mid;
				}
			}
			_temp = Integer.parseInt(pcounty)-1;
			_pcounty = Float.parseFloat(resultMap.get("7-"+_temp).substring(0, resultMap.get("7-"+_temp).indexOf("%")));
			arr_pcountu[3] = _pcounty/_max;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return arr_pcountu;
	}
	
	//进入配置页面
	public String toConfig()throws Exception{
		try{
			if(queryYear==null||"".equals(queryYear)){
				queryYear=String.valueOf(DateUtil.getYear(new Date()));//当前的年份
			}
			List<RsSocialworker> list=rsTalantTeamService.queryCurrentYearConf(queryYear);
			if(list!=null&&list.size()>0){
				socialworkerList=list;
			}
		}catch (Exception e) {
			e.printStackTrace();
			return "error";
		}
		return "conf";
	}

	public String view()throws Exception{
		try{
			if(queryYear==null||"".equals(queryYear)){
				queryYear=String.valueOf(DateUtil.getYear(new Date()));//当前的年份
			}
			//首先查询当前年份的配置信息,如果当前年的配置信息没有，就直接提示先填写当前年的配置信息
			List<RsSocialworker> curYearConfData=rsTalantTeamService.queryCurrentYearConf(queryYear);
			if(curYearConfData==null||curYearConfData.size()<10){
				return "view";
			}
			resultMap=new HashMap<String, String>();
			String lastYear=String.valueOf(Integer.valueOf(queryYear)-1);
			List<Long> rkzl=new ArrayList<Long>();//各区县人口总量
			List<Long> cyry=new ArrayList<Long>();//各区县从业人员总量
			List<Long> ncldl=new ArrayList<Long>();//各区县农村农运力总量
			List<Long> czsg=new ArrayList<Long>();//各区县农村农运力总量
			for (int i=0;i<curYearConfData.size();i++) {
				rkzl.add(curYearConfData.get(i).getT1());
				cyry.add(curYearConfData.get(i).getT2());
				ncldl.add(curYearConfData.get(i).getT3());
				czsg.add(curYearConfData.get(i).getT4());
				resultMap.put(13+"-"+i, curYearConfData.get(i).getT4().toString());//今年持证社工人数
			}
			List<RsTalantteam> curData=rsTalantTeamService.queryDataByYear(queryYear);//当前年的所有数据
			List<RsTalantteam> lastData=rsTalantTeamService.queryDataByYear(lastYear);//上一年的所有数据
			
			//解析数据
			if(curData!=null&&curData.size()>0){
				for (int i = 0; i < curData.size(); i++) {
					RsTalantteam curT =curData.get(i);
					RsTalantteam lastT = (lastData==null?null:lastData.get(i));
					int part=curT.getTp().intValue();
					Long[] curDataArray=new Long[]{curT.getT1(),curT.getT2(),curT.getT3(),curT.getT4(),curT.getT5(),curT.getT6(),curT.getT7(),curT.getT8(),curT.getT9(),curT.getT10()};
					Long[] lastDataArray=null;
					if(lastT!=null){
						lastDataArray=new Long[]{lastT.getT1(),lastT.getT2(),lastT.getT3(),lastT.getT4(),lastT.getT5(),lastT.getT6(),lastT.getT7(),lastT.getT8(),lastT.getT9(),lastT.getT10()};
					}
					switch (part) {
					case 1:
						//统计第一部分每万人口中人才资源量
						this.calPct(1, curDataArray, lastDataArray,rkzl,resultMap);
						break;
					case 2:
						//统计第二部分企业经营管理人才占从业人员的比例
						this.calPct(2, curDataArray, lastDataArray,cyry,resultMap);
						break;
					case 3:
						//统计第三部分专业技术人才占从业人员的比例
						this.calPct(3, curDataArray, lastDataArray,cyry,resultMap);
						break;
					case 5:
						//统计第四部分农村实用人才占农村农运力的比例
						this.calPct(5, curDataArray, lastDataArray,ncldl,resultMap);
						break;				
					default:
						//统计第五部分持证社工
						this.calPct(6, curDataArray, lastDataArray,czsg,resultMap);
						break;
					}
				}
			}
		}catch (Exception e) {
			e.printStackTrace();
			return "error";
		}
		return "view";
	}
	
	public String ExportExecl(){
		try {
			HttpServletResponse response=getResponse();
			OutputStream os = response.getOutputStream();// 取得输出流   
			response.reset();// 清空输出流   
			String name = new String(FNAME.getBytes("GB2312"), "ISO8859-1");
			response.setHeader("Content-disposition", "attachment; filename=\""+ name + "\"");// 设定输出文件头
			response.setContentType("application/msexcel");// 定义输出类型
			String path = request.getSession().getServletContext().getRealPath("")+"\\file"; 
			String folder= "K"+sdfDay.format(new Date(System.currentTimeMillis()));
			String dir= path+"\\"+folder+"\\";
		    File file=new File(dir);
		    if (file.exists()) { 
				//删除目录中的所有文件或者文件夹
				for(File f:file.listFiles()){
					f.delete();
				}
			}
		    dir+=sdf.format(new Date(System.currentTimeMillis()));
		    file=new File(dir);
		    file.mkdirs();//创建当天统计目录
		    
		    //拷贝一份模板文件
		    InputStream in=new  FileInputStream(path+"\\"+FNAME);
	        BufferedInputStream is=new BufferedInputStream(in);
	        file=new File(dir+"\\"+FNAME);
			OutputStream out=new FileOutputStream(file);
            int readLen=0;  
            byte[] buf=new byte[1024];  
            while ((readLen=is.read(buf, 0, 1024))!=-1) {  
            	out.write(buf, 0, readLen);  
            }
            is.close();
            in.close();
            out.close();

            //导入数据
            FileInputStream input= new FileInputStream(file);
            HSSFWorkbook workbook = new HSSFWorkbook(input);
            out= new FileOutputStream(file);
            HSSFSheet sheet = workbook.getSheetAt(0);//第一页
            this.view();//查询当前数据
            if(resultMap!=null&&resultMap.size()>0){
            	HSSFRow row =null;
            	for(int i=3;i<14;i++){
            		row = sheet.getRow(i);
            		if(i>=3&&i<=8){
            			writeValue(row,i-2+"-",resultMap);
            		}else if(i>=9&&i<=11){
            			writeValue(row,i+"-",resultMap);
            		}else if(i==12){
            			writeValue(row,i+1+"-",resultMap);
            			row.getCell(2).setCellValue(resultMap.get(i+1+"-0")==null?null:new HSSFRichTextString(resultMap.get(i+1+"-0")));
            		}else{
            			writeValue(row,i-1+"-",resultMap);
            		}
            	}           
            }
            workbook.write(out);
            out.flush();
            workbook.write(os);  
            out.close();
            os.close();
            return this.NONE;
		} catch (Exception ex) {
			ex.printStackTrace();
			return this.NONE;
		}
	}
	/*
	 * param: part 统计的哪一部分
	 * param: curDataArray　当前年的数据
	 * param: lastDataArray　上一年的数据
	 * param: curYearConf　当年的配置信息
	 * param: resultMap　保存统计结果
	 * desc:统计各部分的百分比信息
	 */
	public void calPct(int part,Long[] curDataArray,Long[] lastDataArray,List<Long> fm,Map<String, String> resultMap){
		for (int i = 0; i < curDataArray.length; i++) {
			//先计算所占比例(持证社会除外)
			if(part!=6){
				this.ca1(part,i,curDataArray[i],fm.get(i),resultMap);
			}
			//再计算比例增长率
			if(lastDataArray!=null){
				this.ca2(part, i, curDataArray[i], lastDataArray[i], fm.get(i), resultMap);
			}else{
				this.ca2(part, i, curDataArray[i], null, fm.get(i), resultMap);
			}
			
		}
	}
	
	//先计算所占比例
	public void ca1(int part,int i,Long curdata,Long fm,Map<String,String> resultMap){
		float size = (float)(curdata==null?0:curdata)*100/fm;
		String str = df.format(size)+"%";
		resultMap.put((1+(part-1)*2)+"-"+i, str);
	}
	
	//再计算比例增长率
	public void ca2(int part,int i,Long curdata,Long lastData,Long fm,Map<String,String> resultMap){
		if(part!=6){
			if(lastData!=null){
				if(lastData==0){
					resultMap.put((2+(part-1)*2)+"-"+i, "");
				}else{
					float size = (float)((curdata==null?0:curdata)-lastData)*100/fm;
					String str = df.format(size)+"%";
					resultMap.put((2+(part-1)*2)+"-"+i, str);
				}
			}else{
				resultMap.put((2+(part-1)*2)+"-"+i, "");
			}
		}else{
			//持证社工的统计有所区别
			resultMap.put((1+(part-1)*2)+"-"+i, (lastData==null?"":lastData.toString()));//上一年持证社工人数
			if(lastData!=null){
				if(lastData==0){
					resultMap.put((2+(part-1)*2)+"-"+i, "");
				}else{
					float size = (float)((curdata==null?0:curdata)-lastData)*100/lastData;
					String str = df.format(size)+"%";
					resultMap.put((2+(part-1)*2)+"-"+i, str);
				}
			}else{
				resultMap.put((2+(part-1)*2)+"-"+i, "");
			}
		}
	}
	
	/*
	 * param: row 当前行
	 * param: key 结果集的key
	 * desc:更改统计单元格的值
	 */
	public void writeValue( HSSFRow row,String key,Map<String, String> resultMap){
		for(int j=0;j<10;j++){
			row.getCell(j+2).setCellValue(resultMap.get(key+j)==null?null:new HSSFRichTextString(resultMap.get(key+j)));
		}
	}
	public String saveOrUpdate()throws Exception{
		JSONObject json=new	JSONObject();
		try{
			if(socialworkerList!=null&&socialworkerList.size()>0){
				for (RsSocialworker socialworker : socialworkerList) {
					rsTalantTeamService.saveOrUpdate(socialworker);
				}
			}
			json.put("flag", 1);
		}catch (Exception ex) {
			ex.printStackTrace();
			json.put("flag", 2);
			return "error";
		}
		outputJson(json);
		return this.NONE;
	}


	public List<RsSocialworker> getSocialworkerList() {
		return socialworkerList;
	}
	public void setSocialworkerList(List<RsSocialworker> socialworkerList) {
		this.socialworkerList = socialworkerList;
	}
	public String getQueryYear() {
		return queryYear;
	}

	public void setQueryYear(String queryYear) {
		this.queryYear = queryYear;
	}

	public Map<String, String> getResultMap() {
		return resultMap;
	}

	public void setResultMap(Map<String, String> resultMap) {
		this.resultMap = resultMap;
	}
	
	
}
